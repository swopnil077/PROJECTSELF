import streamlit as st
from pdf2image import convert_from_bytes
import pytesseract
from PIL import Image
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
import io
import os

st.set_page_config(layout="wide")

# --- Fonts setup ---
fonts = {
    "Patrick Hand": "fonts/PatrickHand-Regular.ttf",
    "Indie Flower": "fonts/IndieFlower-Regular.ttf",
    "Handlee": "fonts/Handlee-Regular.ttf",
    "Dancing Script": "fonts/DancingScript-Regular.ttf",
    "Homemade Apple": "fonts/HomemadeApple-Regular.ttf",
    "Custom User Font": "generated_fonts/custom_font.ttf"
}

st.title("Handwriting Style PDF Converter")

# Upload PDF
uploaded_file = st.file_uploader("Upload your handwritten assignment PDF", type=["pdf"])

if uploaded_file:
    pages = convert_from_bytes(uploaded_file.read())

    st.sidebar.header("Font & Preview Options")
    font_choice = st.sidebar.selectbox("Choose Handwriting Style", list(fonts.keys()))
    selected_font_path = fonts[font_choice]

    # Check if custom font file exists, otherwise fallback
    if font_choice == "Custom User Font" and not os.path.exists(selected_font_path):
        st.sidebar.warning("Custom font not found. Please create one using the font creator below.")
        selected_font_path = fonts["Patrick Hand"]  # fallback

    st.sidebar.markdown("---")

    # Show previews of first two pages with OCR text rendered in selected font
    def render_preview(images, font_path):
        previews = []
        pdfmetrics.registerFont(TTFont("previewfont", font_path))

        for i, img in enumerate(images[:2]):
            text = pytesseract.image_to_string(img, lang='eng')
            buffer = io.BytesIO()
            c = canvas.Canvas(buffer, pagesize=(img.width, img.height))
            c.setFont("previewfont", 18)
            # Very basic: write OCR text at fixed margin, might want to improve layout later
            text_lines = text.split('\n')
            y = img.height - 40
            for line in text_lines:
                c.drawString(20, y, line)
                y -= 22
                if y < 20:
                    break
            c.save()
            buffer.seek(0)
            preview_img = convert_from_bytes(buffer.read())[0]
            previews.append(preview_img)

        return previews

    previews = render_preview(pages, selected_font_path)
    st.markdown("### Preview of first 2 pages with selected font applied:")
    cols = st.columns(len(previews))
    for col, img in zip(cols, previews):
        col.image(img, use_container_width=True)

    # Download converted PDF with font applied (basic implementation)
    if st.button("Generate & Download Converted PDF"):
        pdf_buffer = io.BytesIO()
        c = canvas.Canvas(pdf_buffer, pagesize=(pages[0].width, pages[0].height))
        pdfmetrics.registerFont(TTFont("finalfont", selected_font_path))

        for page_img in pages:
            text = pytesseract.image_to_string(page_img, lang='eng')
            c.setFont("finalfont", 18)
            y = page_img.height - 40
            for line in text.split('\n'):
                c.drawString(20, y, line)
                y -= 22
                if y < 20:
                    break
            c.showPage()
        c.save()
        pdf_buffer.seek(0)
        st.download_button("Download PDF", pdf_buffer, file_name="converted_handwriting.pdf", mime="application/pdf")

# --- Embed handwriting font creator UI (Flask backend must be running at this URL) ---
st.markdown("---")
st.markdown("## Create your own handwriting font")
st.markdown("Draw your characters on the UI below. The font will be generated by the backend and saved.")
st.components.v1.iframe("http://localhost:5001", height=600)

st.markdown("""
Instructions:

1. Use the drawing area above to create your own handwriting font.
2. Once font generation completes, come back to this app and select **Custom User Font** from the dropdown.
3. Upload your handwritten PDF and convert it with your own handwriting style.
""")
